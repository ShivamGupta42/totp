#!/bin/sh

# Copyright (C) 2016 Jak Wings https://github.com/jakwings/totp
#
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.

# Better than nothing: http://www.in-ulm.de/~mascheck/various/set-e/
set -euf +x

# copy-able text should go to fd 3
exec 3>&1 1>&2

LC_ALL=C
export LC_ALL

help() {
  printf '%s' 'totp -- Time-based One-time Password Generator

USAGE: totp [server] [interval] [timestamp] < secret

The default update interval is 30 seconds.
Timestamp is the seconds since 1970-01-01 00:00:00 UTC.

Supported servers: Google, GitHub, GitLab, Bitbucket
'
}
echo() {
  printf '%s\n' "$*"
}
ekho() {
  printf '\n[totp] %s\n\n' "$*"
}
have() {
  [ -x "$(command -v "$1" 2>/dev/null)" ]
}

bin2hex() {
  if have xxd; then
    xxd -p | tr -cd 0-9A-Fa-f
  else
    od -A n -t x1 -v | tr -cd 0-9A-Fa-f
  fi
}

hex2bin() {
  while [ 0 -lt "${#1}" ]; do
    case "$1" in
      ([0-9A-Fa-f][0-9A-Fa-f]*)
        set -- "${1#??}" "$1"
        printf "\\$(printf '%03o' "$(( 0x${2%"$1"} ))")"
        ;;
      (*) set -- "${1#?}"
    esac
  done
}

gen_digest() (
  set -e
  key="$1"
  period="$(printf '%016X' "$2")"
  digest="$(
    set -e
    # NUL is considered harmful. Avoid -hmac <binarykey>!
    hh="${key}"
    while [ 0 -lt "${#hh}" ]; do
      case "${hh}" in (00*) break; esac
      hh="${hh#??}"
    done
    # FIXME: can we not put the key on argv?
    if [ 0 -ne "${#hh}" ]; then
      hex2bin "${period}" | openssl dgst -sha1 -mac hmac -macopt "hexkey:${key}"
    else  # hexkey not supported by old versions from BSD/OSX!
      key="$(hex2bin "${key}" && printf x)"
      hex2bin "${period}" | openssl dgst -sha1 -hmac "${key%x}"
    fi
  )"
  echo "${digest##*' '}"
)

# https://tools.ietf.org/html/rfc6238
#{
  case "${1-}" in (help|-h*|--help|--help=*|-\?*)
    help >&3; exit 0
  esac

  server="${1-Google}"
  interval="${2-30}"
  now="${3-"$(date '+%s')"}"

  if [ -t 0 ]; then
    echo "Enter your secret token: (Press Ctrl-D once/twice to Quit)"
  fi
  secret="$(cat)"

  err=''
  if [ '' = "${secret}" ]; then
    ekho 'The secret token was empty!'; err=1
  fi
  if [ 0 -ge "${interval}" ]; then
    ekho 'The interval could not be recognized as a positive integer!'; err=1
  fi
  if ! { [ 0 -le "${now}" ] || [ 0 -ge "${now}" ]; }; then
    ekho 'The timestamp could not be recognized as an integer!'; err=1
  fi
  if [ '' != "${err}" ]; then
    help; exit 1
  fi

  server="$(echo "${server}" | tr A-Z a-z)"

  # remove whitespace and leading zeros and number sign
  interval="$(( ${interval#"${interval%%[1-9]*}"} + 0 ))"

  # remove whitespace and leading zeros while preserving signness
  now="$(( ${now%%[0-9]*}${now#"${now%%[1-9]*}"} + 0 ))"

  period="$(( now / interval ))"

  case "${server}" in
    # https://github.com/google/google-authenticator/wiki/Key-Uri-Format
    (google|github|gitlab|bitbucket)
      key="$(printf '%s' $secret | base32 -d | bin2hex)"
      [ 0 -lt "${#key}" ] || exit 2
      # The digest is a 160-bit hexadecimal number string.
      digest="$(gen_digest "${key}" "${period}")"
      [ 40 -eq "${#digest}" ] || exit 3
      # Read the last 4 bits and convert it into an unsigned integer.
      offset="$(( 0x${digest#"${digest%?}"} * 2 ))"
      [ 33 -ge "${offset}" ] || exit 4
      # Read a 32-bit positive integer and take at most six rightmost digits.
      nibble="$(printf "%.${offset}s" "${digest}")"
      number="0x$(printf '%.8s' "${digest#"${nibble}"}")"
      token="$(( (number & 0x7FFFFFFF) % 1000000 ))"
      # Pad the token number with leading zeros if needed.
      printf '%06d\n' "${token}" >&3
      ;;
    (*)
      ekho "Your server is not supported: ${server}"
      help; exit 1
  esac
#}
